#! /bin/bash
# Helper script that provides the network configuration for the Fog Node of AntibIoTic
# NOTE: the scripts needs to be executed with sudo priviledges

# ------------- Variables to be edited ------------- #
out_int="wlp2s0"
in_int1="enp0s31f6" # Eth
ip1=""
in_int2="enx5cf7e68b618b" # NETGEAR
ip2="192.168.0.2/24"
in_int3="enx086d41e63ac6" # Raspberry Pi
ip3="192.170.0.2/24"
in_int4="enx086d41e55185" # UDOOx86
ip4="192.169.0.2/24"
ipset_name="allowed_ips"
ipset_type="iphash"
fnet="/etc/netplan/01-network-manager-all.yaml" # file for net configuration
# ------------- --------------------- ------------- #

# DEBUG:
# 	-x: print each command that is executed
# 	-e: exit as soon as a command fails
# set -x
# ------------------------------------------------ #

echo "[script]> ATTENTION! This script requires sudo to work. Please run as sudo."

cfile=true

# Check if $fnet already exists
if test -f "$fnet"; then
	echo "[script]> File '$fnet' already exists. Do you want to replace it? (y/n)"
	echo "If you have not manually edited this file, we recommend to replace it."
	echo "Please note that the current file will not be deleted. It will be renamed and kept in the same folder."
	while true; do
		read yn
		case $yn in
			[Yy]*) cfile=true; break;;
			[Nn]*) cfile=false; break;;
			*) echo "Please answer yes or no.";;
		esac
	done
	if $cfile; then
		# Rename file to into $fnet.old
		mv "$fnet" "$fnet.old"
		echo "[script]> Existing '$fnet' has been renamed as '$fnet.old'" 
	fi
fi


if $cfile;then
	# Create $fnet file
	echo "[script]> Creating file '$fnet' containing the network configuration ..."
	printf "# This file was automatically generated by the AntibIoTic helper script.\n" >> $fnet
	printf "network:\n" >> $fnet
	printf " version: 2\n" >> $fnet
	printf " renderer: networkd\n" >> $fnet
	printf " ethernets:\n" >> $fnet

	# [Interface 1]
	# -- not used

	# [Interface 2]
	printf "  #  --- NETGEAR Router --- #\n" >> $fnet
	printf "  %s:\n" "$in_int2" >> $fnet
	printf "   dhcp4: no\n" >> $fnet
	printf "   addresses: [%s]\n" "$ip2" >> $fnet

	# [Interface 3]
	printf "  #  --- Raspberry Pi  --- #\n" >> $fnet
	printf "  %s:\n" "$in_int3" >> $fnet
	printf "   dhcp4: no\n" >> $fnet
	printf "   addresses: [%s]\n" "$ip3" >> $fnet

	# [Interface 4]
	printf "  #  --- UDOOx86 --- #\n" >> $fnet
	printf "  %s:\n" "$in_int4" >> $fnet
	printf "   dhcp4: no\n" >> $fnet
	printf "   addresses: [%s]\n" "$ip4" >> $fnet

	# Apply settings
	netplan apply
fi

echo "[script]> Enabling packet forwarding..."
# enable packet forwarding
sysctl net/ipv4/ip_forward=1

echo "[script]> Creating the ipset..."
# create an ipset (used for keeping track of devices allowed to the Internet)
ipset create $ipset_name $ipset_type

echo "[script]> Configuring iptables..."
# %-------------------%
#  Configure iptables
# %-------------------%
iptables -P INPUT ACCEPT
iptables -P FORWARD DROP 
iptables -P OUTPUT ACCEPT

# %-- Delete potentially existing rules to avoid duplicates --%
iptables -t nat -D POSTROUTING -o $out_int -j MASQUERADE
iptables -D FORWARD -o $out_int -m set --match-set $ipset_name src -j ACCEPT
iptables -D FORWARD -i $out_int -m state --state RELATED,ESTABLISHED -j ACCEPT 
iptables -D FORWARD

# %-- Add rules --%
# enable Dynamic NAT
iptables -t nat -A POSTROUTING -o $out_int -j MASQUERADE 
# enable in->out fowarding only for hosts in the ipset
iptables -A FORWARD -o $out_int -m set --match-set $ipset_name src -j ACCEPT
# enable out->in forwarding for established connections
iptables -A FORWARD -i $out_int -m state --state RELATED,ESTABLISHED -j ACCEPT 

# % -- Allow forwarding of internal traffic --%
echo "[script]> Do you want to allow internal traffic related to subnets '192.168.0.0/24', '192.169.0.0/24', '192.170.0.1' to be forwarded within the LAN (not the Internet), regardless the security level of their devices (not recommended)? (y/n)"
while true; do
	read yn
	case $yn in
		[Yy]*) iptables -D FORWARD -s 192.168.0.0/14 -d 192.168.0.0/14 -j ACCEPT; iptables -A FORWARD -s 192.168.0.0/14 -d 192.168.0.0/14 -j ACCEPT; break;;
		[Nn]*) iptables -D FORWARD -s 192.168.0.0/14 -d 192.168.0.0/14 -j ACCEPT; break;;
		*) echo "Please answer yes or no.";;
	esac
done
echo "[script]> iptables:"
echo "-------------------------------------------------"
# show current iptables rules (use -L for table format, -F to flush the table)
iptables -S
echo "----------------- NAT ---------------------------"
iptables -t nat -S
echo "-------------------------------------------------"
echo "[script]> Please note that only packets from IPs in the ipset '$ipset_name' are forwarded to the Internet." 
echo "if you want to add an IP to the set use: 'sudo ipset add $ipset_name <IP>'." 
echo "To check details currently setting of ipset you can use 'sudo ipset -L'."
echo "[script]> Do you want to allow the following IPs to access the Internet: '192.168.0.1', '192.169.0.1', '192.170.0.1'? (y/n)"
while true; do
	read yn
	case $yn in
		[Yy]*) ipset add $ipset_name 192.168.0.1; ipset add $ipset_name 192.169.0.1; ipset add $ipset_name 192.170.0.1; break;;
		[Nn]*) ipset del $ipset_name 192.168.0.1; ipset del $ipset_name 192.169.0.1; ipset del $ipset_name 192.170.0.1; break;;
		*) echo "Please answer yes or no.";;
	esac
done
echo "[script]> ipsets:"
echo "-------------------------------------------------"
ipset -L
echo "-------------------------------------------------"
